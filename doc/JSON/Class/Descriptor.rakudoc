=begin rakudoc
=head1 NAME

C<JSON::Class::Descriptor> - base role for attribute and sequence item descriptors

=head1 DESCRIPTION

C<JSON::Class> doesn't modify attribute objects of a class meta-object. Instead, it manipulates with their
I<descriptors>, as described in I<Descriptors> section of L<C<JSON::Class::Details>|rakudoc:JSON::Class::Details>.

=head1 METHODS

=begin item
B<C<method name()>>

Descriptor name. Informational for using in various messages.
=end item

=begin item
B<C<method type()>>

Constraint type.
=end item

=begin item
B<C<method value-type()>>

For L<C<Positional>|https://docs.raku.org/type/Positional> and L<C<Associative>|https://docs.raku.org/type/Associative>
types this must be constraint type of their values. For example, for the following declaration this would be C<Str:D>:

=begin code :lang<raku>
has Str:D @.keys is json;
=end code

=end item

=begin item
B<C<method nominal-type()>>

Nominalization of the C<value-type>. I.e. for C<Str:D()> it would be just nominal C<Str>.
=end item

=begin item
B<C<method set-serializer(|)>>

Set serializer for this element. Particular implementation of the method depends on role consumer.
=end item

=begin item
B<C<method set-deserializer(|)>>

Set deserializer for this element. Particular implementation of the method depends on role consumer.
=end item

=begin item
B<C<method register-helper(Str:D $stage, Str:D $kind, $helper)>>

Registers a helper in form of a code object or a method name string. Values of C<$stage> and C<$kind> are not
constrained, but normally these would be one of C<JSONStages> from L<C<JSON::Class::Types>|rakudoc:JSON::Class::Types> and I<'attribute'>, or
I<'item'>, or I<'value'>, or I<'key'>.

Thread safe.
=end item

=begin item
B<C<method helper(Str:D $stage, Str:D $kind)>>

Returns a helper for a C<$stage>+C<$kind> pair or C<Nil> if no such one.

Thread safe.
=end item

=begin item
B<C<method has-helper(Str:D $stage, Str:D $kind)>>

Tell if we have a helper for the stage and the kind.

Thread safe.
=end item

=begin item
B<C<method serializer(Str:D $kind)>>

A shortcut for I<'to-json'> stage.

Thread safe.
=end item

=begin item
B<C<method deserializer(Str:D $kind)>>

A shortcut for I<'from-json'> stage.

Thread safe.
=end item

=begin item
B<C<method declarant()>>

Returns the type object for which this descriptor was created. It can be a role or a class. For example:

=begin code :lang<raku>
role Key is json {
    has Str $.key;
}
=end code

Descriptor for C<$!key> attribute would return C<Key> as its declarant.
=end item

=begin item
B<C<proto method kind-type(Str:D $kind)>>

Return the type object for which marshaller of the C<$kind> would apply. For example:

=begin code :lang<raku>
has Str:D %.shortname{Int:D} is json;
=end code

I<'value'> type is C<Str:D>, I<'key'> type is C<Int:D>.

Normally one wouldn't care about these as they're used internally for marshalling purposes. But implementing own
descriptor may require adding candidates to this C<proto>.
=end item

=begin item
B<C<proto method kind-stage(Str:D $stage, Str:D $kind)>>

This method is necessary to map stage+kind pair into L<C<JSON::Class::Config>|rakudoc:JSON::Class::Config> helper stage. In other words, if
a marshaller wants to find out if there is a custom helper registered for a type then it would do something like:

=begin code :lang<raku>
$config.helper($value-type, $descriptor.kind-stage('from-json', 'match'))
=end code

We use I<'match'> as the kind because it is currently the only case where this method returns something different from
C<$stage>.
=end item

=head1 SEE ALSO

=item L<C<JSON::Class>|rakudoc:JSON::Class>
=item L<C<JSON::Class::Details>|rakudoc:JSON::Class::Details>
=item L<C<JSON::Class::Attr>|rakudoc:JSON::Class::Attr>
=item L<C<JSON::Class::ItemDescriptor>|rakudoc:JSON::Class::ItemDescriptor>

=head1 COPYRIGHT

(c) 2023, Vadim Belman <vrurg@cpan.org>

=head1 LICENCE

Artistic License 2.0

See the L<I<docs/md/LICENCE>|file:docs/md/LICENCE> file in this distribution.
=end rakudoc

