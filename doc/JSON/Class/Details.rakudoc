=begin rakudoc
=head1 DETAILS

This document tries to explain some in-depth implementation details for better understanding the internal kitchen of the
module. How much information is provided here depends on how much spare time and free energy the author has for this
paper.

=head2 Marshalling Protocols

C<JSON::Class> doesn't actually create or read JSON itself. This task is offloaded to a 3rd-party module. For now it is
L<C<JSON::Fast>|https://modules.raku.org/dist/JSON::Fast>, but theoretically it could be any other module.

C<JSON::Class> task is to either deal with whatever is returned by a JSON parser, or supply JSON generator with a
serializable data structure like L<C<Hash>|https://docs.raku.org/type/Hash>, or
L<C<Array>|https://docs.raku.org/type/Array>. The structure must represent the entire object we're about to marshall.

There are four key method in the core of the process:

=begin item
B<C<from-json>>

Takes either a JSON string, or a deserialized array, or a hash. If all passes good then either an instance of its class
(or a subclass) would be returned, or an array of instances. Arrays could even be nested, depending on the original JSON
structure.
=end item

=begin item
B<C<to-json>>

Can only be invoked on an instance of its class. If no errors happen during serialization, a JSON string is returned.
Though is given C<:raw> named argument the method would return just a L<C<Hash>|https://docs.raku.org/type/Hash>.
=end item

=begin item
B<C<json-serialize>>, B<C<json-deserialize>>

These two methods are the immediate marshalling executors. They only deal with de-/serialized data structures.
=end item

The difference in functionality between these methods is that C<from-json> and C<to-json> are "administrators": their
primary task is to prepare configuration context (see the next section). Then, depending on arguments, they either
parse JSON source, or produce a JSON string. Otherwise they delegate to C<json-serizlie> or C<json-deserialize> methods.

=head2 Object Architechture

A JSONified class or sequence are built by C<is json> trait injecting corresponding roles into the classes themselves
and into their meta-classes.

JSON classes get L<C<JSON::Class::Representation>|Representation.md> role, and their meta gets
L<C<JSON::Class::ClassHOW>|ClassHOW.md>.

JSON sequences get L<C<JSON::Class::Sequential>|Sequential.md>, and their meta gets
L<C<JSON::Class::SequenceHOW>|SequenceHOW.md>.

JSON roles doesn't actually implement any functionality by themselves, therefore only their meta objects are modified.
If a role declared as sequence the meta received L<C<JSON::Class::HOW::Sequential>|HOW/Sequential.md>; otherwise it is
L<C<JSON::Class::RoleHOW>|RoleHOW.md>.

Declarations of L<C<JSON::Class::Representation>|Representation.md> and L<C<JSON::Class::Sequential>|Sequential.md>
roles include classes L<C<JSON::Class::Object>|Object.md> and L<C<JSON::Class::Sequence>|Sequence.md> as their parents.
Though such structure could look like an overkill at first, it allows a JSONified type to be subclasses with no extra
hassle because access to the most used metaobject interfaces is proxied by the roles where C<::?CLASS> symbol points at
the JSONified type, no matter what the MRO of an object is. For example:

=begin code :lang<raku>
class Foo is json {...}
class Bar is Foo {...}
say Bar.json-class; # (Foo) – the method is implemented by JSON::Class::Representation
=end code

=head2 Configuration Context

Serialization and deserialization protocols use a configuration object to find out about various paramters, affecting
the process. More detailed description of the parameters can be found in L<C<JSON::Class::Config>|Class/Config.md>
documentation. Here we only focus on how configuration object is handled by C<JSON::Class>.

When C<to-json> or C<from-json> methods are invoked for an instance of JSONified class they create a configuration
context by setting a C<$*JSON-CLASS-CONFIG> dynamic variable to an instance of C<JSON::Class::Config>. In most simple
cases the instance would be unmodified global, or C<$*JSON-CLASS-CONFIG>, or user-supplied config object as in the
following example:

=begin code :lang<raku>
my $config = JSON::Class::Config.new;
$obj.to-json(:$config);
=end code

The C<:config> named argument can be a hash of configuration paramters too:

=begin code :lang<raku>
$obj.to-json(config => { :pretty, :sorted-keys, :enums-as-value });
=end code

This this case this is equivalient to:

=begin code :lang<raku>
my $config = JSON::Class::Config.new: :pretty, :sorted-keys, :enums-as-value;
$obj.to-json(:$config);
=end code

Yet, the context configuration parameters can be modified with:

=item Method named arguments C<:pretty>, C<:sorted-keys>, C<:enums-as-value>, C<:spacing> - these have the highest priority
=item Class default config paramters (see an example above), but these are only have any effect if there is no active configuration context; i.e. C<$*JSON-CLASS-CONFIG> doesn't exists

=head2 What We Operate With

The module internally never deals with JSON sources except when submitting them to a parser
(L«C«JSON::Fast»|https://raku.land/cpan:TIMOTIMO/JSON::Fast») or returning the result of C<to-json> routine of the
module. C<JSON::Class> manipulates with hashes, arrays, or L<C<Cool>|https://docs.raku.org/type/Cool> values. This is
important to remember when reading the following sections.

=head2 Custom Marshallers

The following example is, perhaps, the best demonstration of how marshalling works

=begin item :example("examples/custom-hash-marshaller.raku") :mtime(1698417912)
From L<examples/custom-hash-marshaller.raku|../../../../examples/custom-hash-marshaller.raku>

=begin code :example :lang("raku")
class Foo is json {
    has %.idx is json(
        :to-json(
            -> %v { say "Attribute-level serializes: ", %v; json-I-cant },
            key => { say "Key-level serializes  : ", $^key; "Foo." ~ $key },
            value => "raku",
            # value => { say "Value-level serializes: ", $^value.raku; $value.raku }
        ),
        :from-json(
            -> %from { say "Attribute-level deserializes: ", %from; json-I-cant },
            key => { say "Key-level deserializes  : '", $^from-key, "'"; $from-key.substr(1) },
            value => { say "Value-level deserializes: '", $^from-value, "'"; $from-value.EVAL }
        )
    );
}

my $foo =
    Foo.new:
        idx => %(
            "k1" => Date.new("2023-10-23"),
            "k2" => pi,
            "k3" => v3.4,
        );

say "### Serializing ###";
my $json = $foo.to-json(:sorted-keys);
say $json;

say "\n### Deserializing ###";
say Foo.from-json($json);
=end code

Sample output:

=begin output :example
### Serializing ###
Attribute-level serializes: {k1 => 2023-10-23, k2 => 3.141592653589793, k3 => v3.4}
Key-level serializes  : k2
Key-level serializes  : k3
Key-level serializes  : k1
{"idx":{"Foo.k1":"Date.new(2023,10,23)","Foo.k2":"3.141592653589793e0","Foo.k3":"v3.4"}}

### Deserializing ###
Attribute-level deserializes: {Foo.k1 => Date.new(2023,10,23), Foo.k2 => 3.141592653589793e0, Foo.k3 => v3.4}
Key-level deserializes  : 'Foo.k1'
Value-level deserializes: 'Date.new(2023,10,23)'
Key-level deserializes  : 'Foo.k3'
Value-level deserializes: 'v3.4'
Key-level deserializes  : 'Foo.k2'
Value-level deserializes: '3.141592653589793e0'
Foo.new(idx => ${"oo.k1" => Date.new(2023,10,23), "oo.k2" => 3.141592653589793e0, "oo.k3" => v3.4})
=end output

=end item

We see here default marshallers for the attribute itself and marshallers for keys and values. The default marshallers
are using `json-I-cant` to fallback to key/value ones because otherwise these wouldn't be invoked.

=head3 Marshalling By Method Name

In the above example C<value> serializer is set to I<"raku"> string which is treated as a method name. There are
different expectation as to where the method name is looked up for. The right one would be: on the value being
serialized. This is because attribute's C<is json> trait all about the attribute itself or its value.

Another possibly confusing at first details is about deserializing with a method name. If you pay attention to the value
deserializer in the above example, it doesn't use C<EVAL> as method name but invokes it directly instead. This is
because the deserializer method is lookup upon target value type. In the above case it is
L<C<Mu>|https://docs.raku.org/type/Mu> as the default constraint type of hash values and it doesn't implement C<EVAL>.
But even if we declare C<%.idx> as C<has Str %.idx>, C<EVAL> as method name won't work for us because deserializing
method is expected to receive the source JSON value is its only positional argument.

=head3 Marshalling With JSON Class Methods

Ok, but what if we want to marshall using JSON class owns methods? It can be done using C<$*JSON-CLASS-SELF> variable.

=begin item :example("examples/marshall-via-json-class.raku") :mtime(1698417912)
From L<examples/marshall-via-json-class.raku|../../../../examples/marshall-via-json-class.raku>

=begin code :example :lang("raku")
class Foo is json(:skip-null) {
    has Real $.n
        is json(
            :serializer({ $*JSON-CLASS-SELF.n2s($_) }),
            :deserializer({ $*JSON-CLASS-SELF.s2n($_) }) );

    multi method new(Real $n) { self.bless: :$n }

    proto method n2s(|) {*}
    multi method n2s(Real:U \t) { t.^name }
    multi method n2s(Real:D \n) { n.^name ~ ":" ~ n }

    method s2n(Str:D $from) {
        if $from.contains(":") {
            my ($type, $val) = $from.split(":");
            return $val."$type"()
        }
        ::($from)
    }
}

say "Serializing π  : ", Foo.new(pi).to-json;
say "Serializing Num: ", Foo.new(Num).to-json;
say "";
say "Deserializing a Rat: ", Foo.from-json(q<{"n":"Rat:-12.42"}>).n.WHICH;
say "Deserializing a type: ", Foo.from-json(q<{"n":"Int"}>).n.WHICH;
=end code

Sample output:

=begin output :example
Serializing π  : {"n":"Num:3.141592653589793"}
Serializing Num: {"n":"Num"}

Deserializing a Rat: Rat|-621/50
Deserializing a type: Int|U3324726349136
=end output

=end item

=head3 Marshaller Signature Match

When C<JSON::Class> verifies if a marshaller can be used it tries to match its signature against the value it has, where
I<value> can be attribute value for serialization, and JSON value for deserialization. It does so by using C<cando>
method of L<C<Routine>|https://docs.raku.org/type/Routine>. Apparently, when there is match the code gets invoked.
Otherwise the situation is treated as if the marshaller invoked C<json-I-cant> and gave up on processing the value:

=begin item :example("examples/marshaller-signature-match.raku") :mtime(1698417912)
From L<examples/marshaller-signature-match.raku|../../../../examples/marshaller-signature-match.raku>

=begin code :example :lang("raku")
class Foo is json {
    has Real:D $.foo is json(:serializer(-> Int:D \v { say "serializing ", v.WHICH; v.Rat })) is required;
}

say Foo.new(foo => 12).to-json;
say Foo.new(foo => 1.2).to-json;
=end code

Sample output:

=begin output :example
serializing Int|12
{"foo":12.0}
{"foo":1.2}
=end output

=end item

=head2 Type Mapping

C<JSON::Class> supports deserialization type mapping which allows user code to override 3rd-party standard types with
their own classes.

For example, let's say there is an API module for a web-service which de-JSONifies a REST response into an instance of
C<Web::Service::Response>. The raw response object is barely useful for us and we decide to subclass it with
C<MyProject::Response> which extends the original class functionality for our needs. Now it all winds down to rather
simple code if the C<Web::Service> module is using C<JSON::Class>:

=begin code :lang<raku>
JSON::Class::Config().map-type(Web::Service::Response(), MyProject::Response());
my $web-service = Web::Service().new();
await($web-service.request().andthen({
    say(.response().^name())
}))
=end code

That's all folks! Committing away the first line of the example will result in I<Web::Service::Response> output again.

A well-behaving C<Web::Service> module would allow to submit a custom L<C<JSON::Class::Config>|Config.md>
object, but the global one will do too...

... unless the C<Web::Service> creates and uses its own config, but that's an ethical problem beyond this documentation
area of responsibility!

For the sake of declarative syntax, there is C<is json-wrap> trait which allows to declare a sub-class as a replacement:

=begin code :lang<raku>
class MyProject::Response is json-wrap(Web::Service::Response) {
    ...
}
=end code

The trait doesn't install the mapping automatically though. This might be undesirable. One would still need a call like
this to activate it:

=begin code :lang<raku>
$config.map-type(MyProject::Response())
=end code

=head2 Descriptors

C<JSON::Class> avoids modifying attribute objects of meta-object of a class. Instead, it creates a registry of them
where the information about the ways of JSONifying their values is kept. The details of registry implementation are
irrelevant, all we need to know is that it holds instances of I<descriptors>. There are two kinds of descriptors:

=item I<attribute descriptors> for attributes of a JSON class
=item I<item descriptors> for items of a JSON sequence

Each JSONified type obejct has its own registry. When a new JSON class or sequence is built registries from parent
classes or JSON roles consumed are merged to form the full picture of what's to be marshalled.

=head1 SEE ALSO

=item L<C<JSON::Class>|../Class.md>

=head1 COPYRIGHT

(c) 2023, Vadim Belman <vrurg@cpan.org>

=head1 LICENCE

Artistic License 2.0

See the L<I<LICENCE>|../../../../LICENCE> file in this distribution.

=end rakudoc

